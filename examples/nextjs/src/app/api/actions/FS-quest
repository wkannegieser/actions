import {
  ActionPostResponse,
  createPostResponse,
  ActionGetResponse,
  ActionPostRequest,
  createActionHeaders,
} from '@solana/actions';
import { Connection, PublicKey, Transaction } from '@solana/web3.js';

const FLIPSIDE_API_KEY = process.env.FLIPSIDE_API_KEY;
const FLIPSIDE_API_URL = 'https://api.flipsidecrypto.xyz';

const headers = createActionHeaders({
  chainId: "mainnet",
  actionVersion: "2.2.1",
});

export const GET = async (req: Request) => {
  try {
    // Fetch available quests from Flipside API
    const response = await fetch(`${FLIPSIDE_API_URL}/v1/quests`, {
      headers: {
        'x-api-key': FLIPSIDE_API_KEY || '',
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error('Failed to fetch quests');
    }

    const quests = await response.json();
    const baseHref = new URL('/api/actions/flipside/quest', new URL(req.url).origin).toString();

    // Format the response according to Actions specification
    const payload: ActionGetResponse = {
      title: "Flipside Quests",
      icon: 'https://flipsidecrypto.xyz/favicon.ico',
      description: "Complete on-chain quests to earn rewards",
      label: "View Available Quests",
      links: {
        actions: quests.map((quest: any) => ({
          type: 'transaction',
          label: quest.title,
          href: `${baseHref}/${quest.id}`,
          parameters: [
            {
              name: 'walletAddress',
              label: 'Enter your wallet address',
              required: true,
            }
          ],
        })),
      },
    };

    return Response.json(payload, { headers });
  } catch (error) {
    console.error('Error:', error);
    return Response.json(
      { error: 'Failed to fetch quests' },
      { status: 500, headers }
    );
  }
};

export const POST = async (req: Request) => {
  try {
    const body: ActionPostRequest = await req.json();
    const { account } = body; // This is the user's wallet address
    const url = new URL(req.url);
    const questId = url.pathname.split('/').pop(); // Get quest ID from URL

    if (!questId) {
      throw new Error('Quest ID is required');
    }

    // Create quest entry in Flipside
    const entryResponse = await fetch(`${FLIPSIDE_API_URL}/v1/quest-entries`, {
      method: 'POST',
      headers: {
        'x-api-key': FLIPSIDE_API_KEY || '',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        questId,
        walletAddress: account,
      }),
    });

    if (!entryResponse.ok) {
      throw new Error('Failed to create quest entry');
    }

    const entry = await entryResponse.json();

    // Create a simple transaction to validate the wallet
    // In a real implementation, this would involve specific on-chain actions
    const connection = new Connection('https://api.mainnet-beta.solana.com');
    const transaction = new Transaction();
    
    const payload: ActionPostResponse = await createPostResponse({
      fields: {
        transaction: Buffer.from(transaction.serialize()).toString('base64'),
        message: `Started quest: ${questId}`,
      },
    });

    return Response.json(payload, { headers });
  } catch (error) {
    console.error('Error:', error);
    return Response.json(
      { error: 'Failed to process request' },
      { status: 500, headers }
    );
  }
};

export const OPTIONS = async () => {
  return new Response(null, { headers });
};
